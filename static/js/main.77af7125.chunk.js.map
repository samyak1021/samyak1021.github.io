{"version":3,"sources":["Components/MovieForm/MovieForm.jsx","Components/Opinion/Opinion.jsx","Components/Movie/Movie.jsx","Components/MovieList/MovieList.jsx","Components/Navigation/LeftMenu.jsx","Components/Navigation/Navbar.jsx","Repository.js","App.js","serviceWorker.js","index.js"],"names":["Option","AutoComplete","movieDb","MovieDb","MovieForm","props","setMovies","movie","setState","movies","setMovieName","movieName","selectedMovieName","searchMovies","searchMovie","query","then","res","results","catch","console","error","handleSearch","value","onSelect","options","addMovie","state","selectedMovie","findIndex","id","key","this","dropdownMatchSelectWidth","style","width","onSearch","map","title","undefined","releaseDate","release_date","slice","React","Component","Opinion","rating","onClick","movieId","text","label","LikeOutlined","DislikeOutlined","className","type","shape","size","Meta","Card","Movie","vote_average","poster_path","actions","showOpinion","push","hoverable","cover","alt","src","MovieList","emptyDescription","length","movieInfo","span","description","SubMenu","Menu","MenuItemGroup","ItemGroup","LeftMenu","mode","Item","Navbar","showDrawer","visible","onClose","current","tmdbApi","axios","create","baseURL","discoverMovies","sortBy","includeAdult","includeVideo","page","releaseDateFrom","voteAverageFrom","withGenres","withoutGenres","originalLanguage","get","params","TabPane","Tabs","App","log","prevState","message","success","handleClick","onSubmit","liked","disliked","languageOfMovie","voteAverage","runTime","forEach","concat","original_language","with_runtime","genre_ids","like","join","dislike","languages","ratings","Math","min","discoverMovie","response","recommendations","data","finally","icon","SearchOutlined","defaultActiveKey","tab","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77af7125.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./MovieForm.css\";\r\nimport { AutoComplete } from \"antd\";\r\nimport { MovieDb } from \"moviedb-promise\";\r\n\r\n// const { Option } = AutoComplete;\r\nconst Option = AutoComplete.Option;\r\n\r\nconst movieDb = new MovieDb(\"0f8d529ca28503395a1f7dc2532ad517\");\r\nfunction getReleaseYear(releaseDate) {\r\n  let releaseYear = \"\";\r\n\r\n  if (releaseDate === undefined) {\r\n    releaseYear = \"\";\r\n  }\r\n  else {\r\n    releaseYear = releaseDate.slice(0, 4);\r\n  }\r\n\r\n  return releaseYear;\r\n}\r\n\r\nclass MovieForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movies: [],\r\n      selectedMovieName: \"\",\r\n    };\r\n  }\r\n\r\n  setMovies = (movie) => {\r\n    this.setState({\r\n      movies: movie,\r\n    });\r\n  };\r\n\r\n  setMovieName = (movieName) => {\r\n    this.setState({\r\n      selectedMovieName: movieName,\r\n    });\r\n  };\r\n\r\n  searchMovies = (movieName) => {\r\n    movieDb\r\n      .searchMovie({ query: movieName })\r\n      .then((res) => {\r\n        this.setMovies(res.results);\r\n      })\r\n      .catch(console.error);\r\n  };\r\n\r\n  handleSearch = (value) => {\r\n    if (value) this.searchMovies(value);\r\n    this.setMovieName(value);\r\n  };\r\n\r\n  onSelect = (value, options) => {\r\n    const { addMovie } = this.props;\r\n    const { movies } = this.state;\r\n    // eslint-disable-next-line eqeqeq\r\n    const selectedMovie = movies.findIndex((movie) => movie.id == options.key);\r\n\r\n    addMovie(movies[selectedMovie]);\r\n  };\r\n\r\n  render() {\r\n    const { selectedMovieName, movies } = this.state;\r\n\r\n    return (\r\n      <AutoComplete\r\n        dropdownMatchSelectWidth={252}\r\n        style={{\r\n          width: 300,\r\n        }}\r\n        onSelect={this.onSelect}\r\n        onSearch={this.handleSearch}\r\n        value={selectedMovieName}\r\n      >\r\n        {movies.map((movie) => (\r\n          <Option key={movie.id} value={movie.id}>\r\n            {`${movie.title} (${getReleaseYear(movie.release_date)})`}\r\n          </Option>\r\n        ))}\r\n      </AutoComplete>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieForm;\r\n","import React from \"react\";\r\nimport \"./Opinion.css\";\r\nimport { Button} from 'antd';\r\nimport { LikeOutlined,DislikeOutlined} from '@ant-design/icons';\r\n\r\nfunction Opinion(props) {\r\n  const { rating, onClick, movieId } = props;\r\n\r\n  const text = rating ? \"liked\" : \"haven't liked\";\r\n  const label = rating ? <LikeOutlined /> : <DislikeOutlined /> ;\r\n\r\n  return (\r\n    <div className=\"custom-container\">\r\n      <Button className=\"btn btn-primary\" type=\"primary\" shape=\"circle\"  size= \"small\" onClick={() => onClick(movieId)}>\r\n        {label}\r\n      </Button>\r\n      <p>You {text} this</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Opinion;\r\n","import React from \"react\";\r\nimport { Card } from \"antd\";\r\nimport \"./Movie.css\";\r\nimport Opinion from \"../Opinion/Opinion\";\r\n\r\nconst { Meta } = Card;\r\n\r\nfunction Movie(props) {\r\n  const {\r\n    title,\r\n    vote_average,\r\n    // overview,\r\n    poster_path,\r\n    rating,\r\n    movieId,\r\n    showOpinion,\r\n  } = props;\r\n\r\n  const actions = [];\r\n  if (showOpinion) {\r\n    actions.push(\r\n      <Opinion onClick={props.onClick} rating={rating} movieId={movieId} />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      hoverable\r\n      style={{ width: 240 }}\r\n      cover={\r\n        <img\r\n          alt={title}\r\n          src={`https://image.tmdb.org/t/p/w200${poster_path}`}\r\n        />\r\n      }\r\n      actions={actions}\r\n    >\r\n      <Meta title={`${title} (${vote_average})`} />\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\nimport { Row, Col, Empty } from \"antd\";\r\nimport Movie from \"../Movie/Movie\";\r\nimport \"./MovieList.css\";\r\n\r\nfunction MovieList(props) {\r\n  const { movies, rating, onClick, showOpinion, emptyDescription } = props;\r\n\r\n  return (\r\n    <div className=\"movie-list\">\r\n      {movies.length ? (\r\n        <Row>\r\n          {movies.map((movieInfo) => (\r\n            <Col span={6}>\r\n              <Movie\r\n                key={movieInfo.id}\r\n                {...movieInfo}\r\n                movieId={movieInfo.id}\r\n                onClick={onClick}\r\n                rating={rating ? rating[movieInfo.id] : null}\r\n                showOpinion={showOpinion}\r\n              />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      ) : (\r\n        <Empty description={emptyDescription} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MovieList;\r\n","import React from \"react\";\r\nimport { Menu } from \"antd\";\r\n\r\nconst SubMenu = Menu.SubMenu;\r\nconst MenuItemGroup = Menu.ItemGroup;\r\n\r\nfunction LeftMenu() {\r\n  return (\r\n    <Menu mode=\"horizontal\">\r\n      <Menu.Item key=\"mail\">Home</Menu.Item>\r\n      <SubMenu title={<span>Blogs</span>}>\r\n        <MenuItemGroup title=\"Item 1\">\r\n          <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\r\n          <Menu.Item key=\"setting:2\">Option 2</Menu.Item>\r\n        </MenuItemGroup>\r\n        <MenuItemGroup title=\"Item 2\">\r\n          <Menu.Item key=\"setting:3\">Option 3</Menu.Item>\r\n          <Menu.Item key=\"setting:4\">Option 4</Menu.Item>\r\n        </MenuItemGroup>\r\n      </SubMenu>\r\n      <Menu.Item key=\"alipay\">Contact Us</Menu.Item>\r\n    </Menu>\r\n  );\r\n}\r\nexport default LeftMenu;\r\n","import React, { Component } from \"react\";\r\nimport LeftMenu from \"./LeftMenu\";\r\n// import { Drawer, Button } from 'antd';\r\n// import logo from './website_logo.png'\r\nclass Navbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      current: \"mail\",\r\n      visible: false,\r\n    };\r\n  }\r\n\r\n  showDrawer = () => {\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n  };\r\n\r\n  onClose = () => {\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"menuBar\">\r\n        <div className=\"logo\" />\r\n        <div className=\"menuCon\">\r\n          <div className=\"leftMenu\">\r\n            <LeftMenu />\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nexport default Navbar;\r\n","import axios from 'axios';\r\n\r\nconst tmdbApi = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3/\",\r\n});\r\nconst apiKey = \"0f8d529ca28503395a1f7dc2532ad517\";\r\n\r\nfunction discoverMovies(sortBy, includeAdult, includeVideo, page,releaseDateFrom, voteAverageFrom, withGenres, withoutGenres, originalLanguage) {\r\n    return (\r\n        tmdbApi.get('/discover/movie', {\r\n            params: {\r\n                \"api_key\": apiKey,\r\n                \"sort_by\": sortBy,\r\n                \"include_adult\": includeAdult,\r\n                \"include_video\": includeVideo,\r\n                \"page\": page,\r\n                \"primary_release_date.gte\": releaseDateFrom,\r\n                \"vote_average.gte\": voteAverageFrom,\r\n                \"with_genres\": withGenres,\r\n                \"without_genres\": withoutGenres,\r\n                \"with_original_language\": originalLanguage\r\n            }\r\n        })\r\n    );\r\n}\r\n\r\nexport default discoverMovies;","import React from \"react\";\r\nimport { Tabs, Button, message} from \"antd\";\r\nimport MovieForm from \"./Components/MovieForm/MovieForm\";\r\nimport MovieList from \"./Components/MovieList/MovieList\";\r\nimport Navbar from \"./Components/Navigation/Navbar\";\r\nimport discoverMovie from \"./Repository\";\r\nimport { SearchOutlined } from \"@ant-design/icons\";\r\nimport \"./App.css\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movies: [],\r\n      rating: {},\r\n      recommendations: [],\r\n    };\r\n  }\r\n\r\n  addMovie = (movie) => {\r\n    console.log(movie);\r\n    this.setState((prevState) => {\r\n      return {\r\n        movies: [...prevState.movies, movie],\r\n      };\r\n    },() =>{message.success(\"Your movie is added\")});\r\n  };\r\n\r\n  handleClick = (movieId) => {\r\n    const { rating } = this.state; //rating = {}\r\n    rating[movieId] = !rating[movieId];\r\n    this.setState({\r\n      rating: rating,\r\n    });\r\n  };\r\n\r\n  onSubmit = () => {\r\n    const { movies, rating } = this.state;\r\n    var liked = [];\r\n    var disliked = [];\r\n    var releaseDate = [];\r\n    var languageOfMovie = [];\r\n    var voteAverage = [];\r\n    var runTime = [];\r\n    movies.forEach((movie) => {\r\n      releaseDate = releaseDate.concat(movie.release_date.slice(0).slice(0, 4));\r\n      languageOfMovie = languageOfMovie.concat(movie.original_language);\r\n      voteAverage = voteAverage.concat(movie.vote_average);\r\n      runTime = runTime.concat(movie.with_runtime);\r\n      if (rating[movie.id] === false || rating[movie.id] === undefined) {\r\n        disliked = disliked.concat(movie.genre_ids);\r\n      } else {\r\n        liked = liked.concat(movie.genre_ids);\r\n      }\r\n    });\r\n    const like = liked.join(\"|\");\r\n    const dislike = disliked.join(\",\");\r\n    const languages = languageOfMovie.join(\"|\");\r\n    const ratings = Math.min(...voteAverage);\r\n    var releaseDateFrom = Math.min(...releaseDate);\r\n    releaseDateFrom = releaseDateFrom + \"\";\r\n    console.log(rating, movies, like, dislike);\r\n    discoverMovie(\r\n      \"popularity.desc\",\r\n      false,\r\n      false,\r\n      1,\r\n      releaseDateFrom + \"-01-01\",\r\n      ratings,\r\n      like,\r\n      dislike,\r\n      languages\r\n    )\r\n      .then((response) => {\r\n        this.setState({ recommendations: response.data.results });\r\n        message.success(\"You're recommendations are ready!\")\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n      .finally(() => {\r\n        console.log(\"Movies Fetched\");\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { movies, rating, recommendations } = this.state;\r\n    return (\r\n      <div className=\"app\">\r\n        <Navbar />\r\n        <MovieForm addMovie={this.addMovie} />\r\n        <Button\r\n          type=\"primary\"\r\n          shape=\"round\"\r\n          icon={<SearchOutlined />}\r\n          size=\"default\"\r\n          onClick={this.onSubmit}\r\n        >\r\n            Recommend!\r\n        </Button>\r\n        <Tabs defaultActiveKey=\"watched\" className=\"movie-tabs\">\r\n          <TabPane tab=\"Watched\" key=\"watched\">\r\n            <MovieList\r\n              movies={movies}\r\n              onClick={this.handleClick}\r\n              rating={rating}\r\n              showOpinion={true}\r\n              emptyDescription=\"No movies added!\"\r\n            />\r\n          </TabPane>\r\n          <TabPane tab=\"Recommendations\" key=\"recommendations\">\r\n            <MovieList\r\n              movies={recommendations}\r\n              onClick={() => {}}\r\n              showOpinion={false}\r\n              emptyDescription=\"Submit your favorite movies to get recommendations!\"\r\n            />\r\n          </TabPane>\r\n        </Tabs>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"antd/dist/antd.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App text=\"Hello world!\" />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}